## Copyright:   Public domain.
## Filename:    sample-1967.lvdc
## Purpose:     Excerpts from 1967 LVDC flight program.
##		Scans from an original assembly listing 
##		have been transcribed into a format suitable
##		for assembly by yaASM.  The changes are 
##		principally prefixing comments by '#'
##		alignment of columns at tab stops, and 
##		addition of code/data-alignment pseudo-ops. 
## Assembler:   yaASM
## Contact:     Ron Burkey <info@sandroid.org>.
## Website:     www.ibiblio.org/apollo/LVDC.html
## Page images: www.ibiblio.org/apollo/LVDC-1967/*.jpg
## Mod history: 2019-07-09 RSB	Transcribed from page images.

## The following two lines were not present in the original scans,
## and have been added to conform to the requirements of the 
## assembler program, yaASM.
	DATA	2-14-0-000
	CODE	4-04-1-004

## Page 273

#************************************************************************
#*                                                                      *
#*                          ARCTANGENT ROUTINE                          *
#*                                                                      *
#************************************************************************

#************************************************************************
#*                                                                      *
#*  INPUT       TWO ARGUMENTS, X IN ACC AND Z IN PQ, SCALED THE SAME    *
#*                                                                      *
#*  OUTPUT      ARCTAN (X/Z) IN ACCUMULATOR, IN PIRADS SCALED B0        *
#*                                                                      *
#*  NOTE        X CORRESPONDS TO A SIN AND Z CORRESPONDS TO A COS SINCE *
#*              TAN = SIN/COS                                           *
#*                                                                      *
#************************************************************************


AUATAN	STO	777
	SHR	1
	STO	UTEMPI			# BN+1  SIN Z
	TMI	*+2
	TRA	*+2
	RSU	KZERO
	STO	UTEMP3			# BN+1  ABS (SIN Z)
	CLA	775			# BN
	SHR	1
	STO	UTEMP2			# BN+1  COS Z
	TMI	*+2
	TRA	*+2
	RSU	KZERO
	STO	UTEMP4			# BN+1  ABS (COS Z)
	SUB	UTEMP3			# BN+1  ABS (SIN Z)
	SHR	1
	STO	UTEMP5			# BN+2  ABS (COS Z) - ABS (SIN Z)
	CLA	UTEMP3			# BN+1  ABS (SIN Z)
	ADD	UTEMP4			# BN+1  ABS (COS Z)
	STO	UTDIV1			# BN+1  ABS (COS Z) + ABS (SIN Z)
	CLA	777
	STO	UTEMP3
	CLA	UTEMP5
	HOP	HCFDIV

#*	
#*   V = (1/2)*(ABS(COS Z) - ABS(SIN Z))/(ABS(COS Z) + ABS(SIN Z))
#*

	STO	UTEMP4			# B1    V
	MPH	UTEMP4			# B1
	SHL	1
	STO	UTEMP5			# B1    V**2
	MPH	=-.3730974E-2B-6	# C11
	ADD	=.016760072B-5		# C9
	MPH	UTEMP5			# B1    V**2
	ADD	=-.037061733B-4		# C7
	MPH	UTEMP5			# B1    V**2
	ADD	=.06160680B-3		# C5
## Page 274
	MPH	UTEMP5			# B1    V**2
	ADD	=-.10587734B-2		# C3
	MPH	UTEMP5			# B1    V**2
	ADD	=.31830264B-1		# C1
	MPH	UTEMP4			# B1    V
	STO	UTEMP4			# B0    X
#*
#*   X =  V*(C1 + V**2*(C3 + V**2*(C5 + V**2*(C7 + V**2*(C9+V**2*C11)))))
#*
	CLA	UTEMP2			# BN+1  COS Z
	TMI	*+
	CLA	=01			# B0    1/4
	SUB	UTEMP4			# B0    X
	TRA	*+3
	CLA	=03			# B0    3/4
	ADD	UTEMP4			# B0    X
	STO	UTEMP4			# B0
	CLA	UTEMP1			# BN+1  SIN Z
	TMI	*+3
	CLA	UTEMP4
	HOP	UTEMP3
	CLA	KZERO
	SUB	UTEMP4
	HOP	UTEMP3
	
## Page 275

#************************************************************************
#*                                                                      *
#*                      SINE AND COSINE ROUTINE                         *
#*                                                                      *
#************************************************************************

#************************************************************************
#*                                                                      *
#*  INPUT       ARGUMENT IN ACCUMULATOR, IN PIRADS SCALED B0            *
#*                                                                      *
#*  OUTPUT      SINE IN ACCUMULATOR AND COSINE IN PQ, BOTH SCALED B0    *
#*                                                                      *
#************************************************************************


AUSC	STO	777
	STO	UTEMP1			# B0    Z
	TMI	AUSC1
	RSU	KPLUS			# B0    1/2
	STO	UTEMP2			# B0    1/2 - Z
	TMI	*+2
	TRA	AUSC3
	ADD	KPLUS			# B0    1/2
	TRA	AUSC2			#       AC = 1 - Z, B0
AUSC1	ADD	KPLUS			# B0    1/2
	STO	UTEMP2			# B0    1/2 + Z
	TMI	*+2
	TRA	AUSC3
	RSU	=06			# B0    - 1/2
AUSC2	STO	UTEMP1			# B0    - (1 + Z)
AUSC3	CLA	777
	STO	UTEMP3
	CALL	SCPOLY,UTEMP1		# COMPUTE SIN
	STO	UTEMP1
	CALL	SCPOLY,UTEMP2		# COMPUTE COS
	STO	775
	CLA	UTEMP1
	HOP	UTEMP3
SCPOLY	STO	777
	STO	UTEMP4			# B0    ANGLE
	MPH	UTEMP4			# B0
	SHL	1
	STO	UTEMP5			# B-1   SQUARE OF ANGLE
	MPH	=-.558396947B3		# 	C7
	ADD	=2.54360520B2		# 	C5
	MPH	UTEMP5			# B-1
	SHR	2
	ADD	=-5.16736782B3		# 	C3
	MPH	UTEMP5			# B-1
	ADD	=3.14158970B2		#	C1
## Page 276
	MPH	UTEMP4			# B0
	SHL	2			#	RESCALE TO B0
	HOP	777
	
## Page 277
## Our sample scans do not include page 277.

## Page 278

## The following line was not present in the original scans,
## and has been added to work around the missing contents of p. 277.
	CODE	4-04-1-147
	
#************************************************************************
#*                                                                      *
#*                     PARTIAL SQUARE ROOT ROUTINE                      *
#*                                                                      *
#************************************************************************

#************************************************************************
#*                                                                      *
#*  INPUT       ARGUMENT IN ACCUMULATOR, ITS PREVIOUS SQUARE ROOT VALUE *
#*              IN UTDIV1.  ARGUMENT SCALED B%2N<, SQ RT SCALED B%N<.   *
#*                                                                      *
#*  OUTPUT      AC CONTAINS NEW VALUE FOR SQ RT OF ARGUMENT.            *
#*              PQ CONTAINS HALF OF %ARGUENT<%PREVIOUS SQ RT<.          *
#*                                                                      *
#************************************************************************


UPSQRT	STO	777			#       LINKAGE
	SHR	1			#  DIVIDE BY 2
	DIV	UTDIV1			#  ISSUE DIVIDE
	CLA	UTDIV1
	SHR	1			#  DIVIDE BY 2
UD1	EXM	2,1,0			#  DELAY 2 CYCLES
	EXM	2,1,0			#  DELAY TWO CYCLES
	ADD	KZERO			#  DELAY 1 CYCLE
	ADD	775			#  RESULT OF DIVISION
	HOP	777			# RETURN
	
## Page 279

#************************************************************************
#*                                                                      *
#*                   MATRIX MULTIPLY ROUTINE                            *
#*                                                                      *
#************************************************************************

#************************************************************************
#*                                                                      *
#*  INPUT       IN THE ACCUMULATOR, A DFW OF THE FORM CLA,A,MPY,B       *
#*              WHERE A AND B ARE THE INITIAL LOCATIONS OF THE          *
#*		MATRICES TO BE MULTIPLIED.				*
#*              IN THE PQ, A WORD CONTAINING A DFW IN SYLLABLE 1        *
#*		OF THE FORM STO, C AND A COUNTER (SCALED 25) IN         *
#*             	SYLLABLE 0.  C IS THE INITIAL LOCATION OF THE PRODUCT   *
#*              MATRIX.                                                 *
#*                                                                      *
#*  OUTPUT      A PRODUCT MATRIX C = AXB (NOT BXA).                     *
#*		IF COUNTER = 1, C(3X1) = A(3X3) X B(3X1).               *
#*              IF COUNTER = 3, C(3X3) = A(3X3) X B(3X3).               *
#*                                                                      *
#*  NOTES	ALL MATRICES WILL BE GROUPED IN VECTOR FORM.            *
#*		EACH COLUMN OR ROW WILL BE STORED AS A VECTOR USING     *
#*              THE VEC PSEUDO OPERATION.  IN ADDITION, THE 3           *
#*              VECTORS REQUIRED TO REPRESENT A 3X3 MATRIX              *
#*              MUST BE STORED CONSECUTIVELY.                           *
#*              THE A MATRIX MUST BE STORED BY ROWS AND THE             *
#*              B MATRIX BY COLUMNS.  THE OUTPUT MATRIX WILL            *
#*              BE STORED BY COLUMNS.                                   *
#*                                                                      *
#************************************************************************


MATMPY	STO	777
	SUB	=001			# ADJUST DFW
	STO	UTEMP4			# SAVE DFW USED TO FORM PRODUCT
	CLA	775	
	STO	UTEMP7			# SAVE DFW USED TO STORE PRODUCT
	AND	=3
	STO	UTEMP5			# SAVE COUNTER
	CLA	777
	STO	UTEMP6			# SAVE RETURN HOP CONSTANT
MM1	HOP*	MMSET
	EXM	0,1,0			# STORE FIRST ELEMENT
	HOP*	MMSET
	EXM	0,1,1			# STORE SECOND ELEMENT
	HOP*	MMSET
	EXM	0,1,2			# STORE THIRD ELEMENT
	CLA	UTEMP5			# COUNTER = 1 OR 3 ORIGINALLY
	SUB	=1			# DECREMENT COUNTER
	TNZ	*+2
	HOP	UTEMP6			# EXIT WHEN COUNTER = 0
	STO	UTEMP5			# SAVE COUNTER
	CLA	UTEMP4			# )
	ADD	=07500004		# )RESET A ADDRESS, INCREMENT B ADDRESS
	STO	UTEMP4			# )           IN PRODUCT DFW
## Page 280
	CLA	UTEMP7			#     )
	ADD	=001			#     )INCREMENT A ADDRESS IN STORE DFW
	STO	UTEMP7			#     )
	TRA	MM1
MMSET	STO	777
	CLA	UTEMP4			# )
	ADD	=001			# )INCREMENT A ADDRESS IN PRODUCT DFW
	STO	UTEMP4			# )
	TRA	UVDOT1			# GO FORM DOT PRODUCT

## RSB, 2019:  The stuff that follows is the definition of constants and 
## variables used in the source code above.  All of them are in a 
## portion of memory that does not appear in the sample pages of code
## we currently have, and thus I have reengineered this section.

	CODE	2-14-0-017
KPLUS
KZERO	OCT	0

	CODE	2-14-0-174
UTEMP1
UTEMP2
UTEMP3

	CODE	2-14-0-210
UTEMP4
UTEMP5
UTEMP6
UTEMP7

	CODE	2-14-0-314
UTDIV1


